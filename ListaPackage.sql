-- Criação da tabela ALUNO
CREATE TABLE ALUNO (
    id_aluno NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    data_nascimento DATE NOT NULL,
    id_curso NUMBER NOT NULL,
    CONSTRAINT fk_aluno_curso FOREIGN KEY (id_curso) REFERENCES CURSO (id_curso)
);

-- Criação da tabela CURSO
CREATE TABLE CURSO (
    id_curso NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL
);

-- Criação da tabela DISCIPLINA
CREATE TABLE DISCIPLINA (
    id_disciplina NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    descricao VARCHAR2(200),
    carga_horaria NUMBER NOT NULL
);

-- Criação da tabela MATRICULA
CREATE TABLE MATRICULA (
    id_matricula NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_aluno NUMBER NOT NULL,
    id_disciplina NUMBER NOT NULL,
    CONSTRAINT fk_matricula_aluno FOREIGN KEY (id_aluno) REFERENCES ALUNO (id_aluno),
    CONSTRAINT fk_matricula_disciplina FOREIGN KEY (id_disciplina) REFERENCES DISCIPLINA (id_disciplina)
);

-- Criação da tabela PROFESSOR
CREATE TABLE PROFESSOR (
    id_professor NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL
);

-- Criação da tabela TURMA
CREATE TABLE TURMA (
    id_turma NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_disciplina NUMBER NOT NULL,
    id_professor NUMBER NOT NULL,
    CONSTRAINT fk_turma_disciplina FOREIGN KEY (id_disciplina) REFERENCES DISCIPLINA (id_disciplina),
    CONSTRAINT fk_turma_professor FOREIGN KEY (id_professor) REFERENCES PROFESSOR (id_professor)
);



-- Criação do pacote PKG_ALUNO
CREATE OR REPLACE PACKAGE PKG_ALUNO AS 
  PROCEDURE excluir_aluno(p_id_aluno IN NUMBER);
  PROCEDURE listar_alunos_maiores_18;
  PROCEDURE listar_alunos_por_curso(p_id_curso IN NUMBER); 
END PKG_ALUNO;
/

-- Corpo do pacote PKG_ALUNO
CREATE OR REPLACE PACKAGE BODY PKG_ALUNO AS
  -- Procedure para excluir aluno e matrículas associadas
  PROCEDURE excluir_aluno(p_id_aluno IN NUMBER) IS
  BEGIN
    DELETE FROM MATRICULA WHERE id_aluno = p_id_aluno;
    DELETE FROM ALUNO WHERE id_aluno = p_id_aluno;
  END excluir_aluno;

  -- Procedure para listar alunos maiores de 18 anos
  PROCEDURE listar_alunos_maiores_18 IS
    CURSOR c_maiores_18 IS
      SELECT nome, data_nascimento
      FROM ALUNO
      WHERE FLOOR((SYSDATE - data_nascimento) / 365) > 18;
  BEGIN
    FOR aluno IN c_maiores_18 LOOP
      DBMS_OUTPUT.PUT_LINE('Nome: ' || aluno.nome || ', Nascimento: ' || aluno.data_nascimento);
    END LOOP;
  END listar_alunos_maiores_18;

  -- Procedure para listar alunos por curso
  PROCEDURE listar_alunos_por_curso(p_id_curso IN NUMBER) IS
    CURSOR c_alunos_por_curso IS
      SELECT nome
      FROM ALUNO
      WHERE id_curso = p_id_curso;
  BEGIN
    FOR aluno IN c_alunos_por_curso LOOP
      DBMS_OUTPUT.PUT_LINE('Nome: ' || aluno.nome);
    END LOOP;
  END listar_alunos_por_curso;

END PKG_ALUNO;
/







-- Criação do pacote PKG_DISCIPLINA
CREATE OR REPLACE PACKAGE PKG_DISCIPLINA AS
  -- Procedure para cadastrar disciplina
  PROCEDURE cadastrar_disciplina(p_nome IN VARCHAR2, p_descricao IN VARCHAR2, p_carga_horaria IN NUMBER);

  -- Cursor para total de alunos por disciplina com o tipo de retorno adequado
  CURSOR total_alunos_por_disciplina IS
    SELECT d.nome, COUNT(m.id_aluno) AS total_alunos
    FROM DISCIPLINA d
    JOIN MATRICULA m ON d.id_disciplina = m.id_disciplina
    GROUP BY d.nome
    HAVING COUNT(m.id_aluno) > 10;

  -- Function para média de idade por disciplina
  FUNCTION media_idade_por_disciplina(p_id_disciplina IN NUMBER) RETURN NUMBER;

  -- Procedure para listar alunos por disciplina
  PROCEDURE listar_alunos_por_disciplina(p_id_disciplina IN NUMBER);
END PKG_DISCIPLINA;
/

-- Corpo do pacote PKG_DISCIPLINA
CREATE OR REPLACE PACKAGE BODY PKG_DISCIPLINA AS
  -- Procedure para cadastrar disciplina
  PROCEDURE cadastrar_disciplina(p_nome IN VARCHAR2, p_descricao IN VARCHAR2, p_carga_horaria IN NUMBER) IS
  BEGIN
    INSERT INTO DISCIPLINA (nome, descricao, carga_horaria)
    VALUES (p_nome, p_descricao, p_carga_horaria);
  END cadastrar_disciplina;

  -- Function para média de idade por disciplina
  FUNCTION media_idade_por_disciplina(p_id_disciplina IN NUMBER) RETURN NUMBER IS
    v_media NUMBER;
  BEGIN
    SELECT AVG(FLOOR((SYSDATE - a.data_nascimento) / 365))
    INTO v_media
    FROM ALUNO a
    JOIN MATRICULA m ON a.id_aluno = m.id_aluno
    WHERE m.id_disciplina = p_id_disciplina;
    RETURN v_media;
  END media_idade_por_disciplina;

  -- Procedure para listar alunos por disciplina
  PROCEDURE listar_alunos_por_disciplina(p_id_disciplina IN NUMBER) IS
    CURSOR c_alunos IS
      SELECT a.nome
      FROM ALUNO a
      JOIN MATRICULA m ON a.id_aluno = m.id_aluno
      WHERE m.id_disciplina = p_id_disciplina;
  BEGIN
    FOR aluno IN c_alunos LOOP
      DBMS_OUTPUT.PUT_LINE('Aluno: ' || aluno.nome);
    END LOOP;
  END listar_alunos_por_disciplina;

END PKG_DISCIPLINA;


BEGIN
  PKG_DISCIPLINA.cadastrar_disciplina('Matemática', 'Disciplina de cálculo e álgebra', 1);
END;
/

BEGIN
  PKG_DISCIPLINA.listar_alunos_por_disciplina(1); -- 
END;
/

DECLARE
  v_media_idade NUMBER;
BEGIN
  v_media_idade := PKG_DISCIPLINA.media_idade_por_disciplina(1);
  DBMS_OUTPUT.PUT_LINE('Média de idade dos alunos: ' || v_media_idade);
END;
/





